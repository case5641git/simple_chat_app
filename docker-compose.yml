version: "3"

x-nginx-cmn: &nginx-cmn
  image: nginx:alpine
  networks:
    - app-network

services:
  app:
    build:
      context: ./api
      dockerfile: .docker/Dockerfile
    container_name: laravel_app
    restart: unless-stopped
    working_dir: /var/www/html/chat_app
    volumes:
      - ./api/app:/var/www/html/chat_app
    ports:
      - "9000:9000"
      - "8000:8000"
    environment:
      - DB_HOST=db
      - DB_DATABASE=chatapp
      - DB_USERNAME=root
      - DB_PASSWORD=root
    depends_on:
      - db
    networks:
      - app-network

  nginx-app:
    <<: *nginx-cmn
    ports:
      - "8081:80"
    volumes:
      - ./api:/var/www
      - ./default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app

  web:
    build:
      context: ./web
      dockerfile: .docker/Dockerfile
    container_name: react_app
    restart: unless-stopped
    volumes:
      - ./web/app:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network
    stdin_open: true
    tty: true

  nginx-web:
    <<: *nginx-cmn
    volumes:
      - ./web/.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./web:/app
      - ./web/dist:/usr/share/nginx/html
    ports:
      - "80:80"
    depends_on:
      - web

  db:
    build:
      context: .
      dockerfile: api/.docker/db/Dockerfile
    # image: mysql:8.0
    container_name: db
    platform: linux/amd64
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: chatapp
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network
    ports:
      - "3306:3306"

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    platform: linux/amd64
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: root
    ports:
      - 8080:80
    depends_on:
      - db
    networks:
      - app-network

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
